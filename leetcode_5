public class demo {
    public static void main(String[] args) {
//        String ss = longestPalindrome("");
        String sss = longestPalindrome2("abc");
        System.out.println(sss);
    }

    //动态规划的办法//还没写完
    public static String longestPalindrome2(String s) {
        //如果当前的字符串是空串，直接返回
        if(s.equals("") || s.length()==1) return s;
        int len = s.length(), left = 0, right = 0,count = 0;
        boolean[][] table = new boolean[len][len];
        for(int j = 0; j<len; j++){
            for(int i = 0; i<=j; i++){
                //做判断，如果当前这ij位置的值是相同且位置差为1或者0，也就是说，这样的 a   aa 两种情况。那么tableij也是有返回值的
                //否则的话，就需要进一步检测了，如果这个字符串是回文，则需要检测一下他们的子串i+1，j-1是不是回文，
                table[i][j] = ((s.charAt(i)==s.charAt(j)) && ((j-i)==1) || table[i+1][j-1] ); //这里有错
                //如果这两个位置的值是一样的，并且当前的这个子串的长度比之前的子串的长度还要长，就需要重新赋值给当前最长的子串
                if(table[i][j] && j-i > right -left){
                    right = j;
                    left = i;
                    count++;

                }
            }
        }
    //最后返回最长的字符串
        if(count>0){
            return s.substring(left,right+1);
        }
        else{
            //如果这个count的值是为0也就是说没有回文字符串。那就直接返回第一个字符
            return s.substring(0,1);
        }

    }

//    暴力法，不可取，检测通不过
    public static String longestPalindrome(String s) {
        int longstringlength = 0;
        int len = 0;
        int count = 0;
        String longestPalindstr = "";
        if(s.length() ==1){
            return s;
        }
        for(int i = 0; i < s.length(); i++){
            for(int j = i+1; j< s.length(); j++){
                //字符串截取的时候，包头不包尾，所以需要手动的加上一，如果要截取i,j的字符串，需要输入i，j+1
                String curr = s.substring(i,j+1);
                len = j-i;
                if(isPalindrome(curr)){
                    if(len > longstringlength){
                        longestPalindstr  = curr;
                        longstringlength = len;
                        count++;
                    }
                }
            }
        }
        if(count>0){
            return longestPalindstr;
        }
        else{
            return s.substring(0,1);
        }
//        return longestPalindstr;
    }

    public static boolean isPalindrome(String s){
        for(int i = 0; i<s.length()-1; i++){
            if(s.charAt(i) != s.charAt(s.length()-1-i)){
                return false;
            }
        }
        return true;
    }
}
