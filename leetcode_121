/*
121. 买卖股票的最佳时机
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。

注意：你不能在买入股票前卖出股票。

 

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

题解，本来想用max 和min来寻找最大最小值，最后的结果就是两个相减，但是很明显这个办法无法保证最小值在最大值前面，也就是说，如果后面确实有价格最低的时候
但是这个时候后面却不一定还有最高价，那就不能做到最大利润了，最后还是选择了记录当前最小值的办法， 然后计算出当前的利润最大值，利润才是我们最后的目标
*/

/*
 //用max min这个办法不行，有瑕疵，不能通过测试案例
        // int temp = 0;
        // int max = prices[1];
        // int min = prices[0];
        // int res = 0;
        // for(int i = 1; i<=prices.length-1; i++){
        //    //找到数组中的最大最小值，最大值不包括第一个元素，如果第一个值最大，那么抛出去是不可能的，所以从第二个开始找
        //    max = Math.max(max,prices[i]);
        //    //由于最后一天只能卖出不能买入，所以最小值不能为最后一个
        //    //并且，如果股票的值为0 也是不允许的，虽然题目并没有说，但是提交的时候就会知道报错
        //    if(i != prices.length-1 ){
        //         // if(i != prices.length-1 && prices[i]!=0){
        //        min = Math.min(min, prices[i]);
        //    }
        //     //反正最后肯定是前面的数字小，后面的数字大，才会有利润
        //     //那就直接用一个值来存下这个差值，如果这个差值一直为负，说明这个股票价格一直跌，不会有盈利
        //    if(prices[i] - prices[i-1] < 0){
        //        temp +=  0;//这里将差值赋值为0是怕后面有相邻的差值为正的时候，被抵消了。直接复制为0就不会了
        //    }else{
        //        //否则就是说，还是有利润的
        //         temp += prices[i] - prices[i-1];
        //    }
        // }
        // //最后判断一下，如果这个差值为0 ，那就说明没有利润，直接返回0
        // if(temp == 0){
        //     res = 0;
        // }else{
        //     //不然就返回最大值减去最小值的差
        //     res = max - min;
        // }
        //     //最后返回这个结果值就行
        //  return res;
*/

class Solution {
    public int maxProfit(int[] prices) {
       
       if(prices.length <= 1) return 0;
        
        int curmin = 100000000;//这个数特别重要，不能随便设置为0，要让这个当前的最小值的的确确是最小值
        int res = 0;
         for(int i = 0; i <prices.length; i++){
            curmin = Math.min(curmin,prices[i]);
            res = Math.max(res, prices[i]-curmin);
        }
        return res;
     }
 }
