/*
888. 公平的糖果交换
爱丽丝和鲍勃有不同大小的糖果棒：A[i] 是爱丽丝拥有的第 i 块糖的大小，B[j] 是鲍勃拥有的第 j 块糖的大小。

因为他们是朋友，所以他们想交换一个糖果棒，这样交换后，他们都有相同的糖果总量。（一个人拥有的糖果总量是他们拥有的糖果棒大小的总和。）

返回一个整数数组 ans，其中 ans[0] 是爱丽丝必须交换的糖果棒的大小，ans[1] 是 Bob 必须交换的糖果棒的大小。

如果有多个答案，你可以返回其中任何一个。保证答案存在。

 

示例 1：

输入：A = [1,1], B = [2,2]
输出：[1,2]
示例 2：

输入：A = [1,2], B = [2,3]
输出：[1,2]
示例 3：

输入：A = [2], B = [1,3]
输出：[2,3]
示例 4：

输入：A = [1,2,5], B = [2,4]
输出：[5,4]
 

提示：

1 <= A.length <= 10000
1 <= B.length <= 10000
1 <= A[i] <= 100000
1 <= B[i] <= 100000
保证爱丽丝与鲍勃的糖果总量不同。
答案肯定存在。


主要是要找到这两个数组之间的关系，我们只需要先计算出这两个数组各自总和之差，通常这个数组的差是一个偶数，那么我们就再在这两个数组之间找到那两个相差
为那个差异值的值，找到并返回就可以了
*/

class Solution {
    public int[] fairCandySwap(int[] A, int[] B) {
        int Maxnum = 10000;
        int sumA = 0;
        int sumB = 0;
        int[] res = new int[2];
        if(A.length <1 ||A.length > Maxnum || B.length <1 || B.length > Maxnum) return null;
        for(int i : A){
            sumA += i;
        }
        for(int j:B){
            sumB += j;
        }
        int differ = 0;
        differ = (sumB-sumA)/2;
        Set<Integer> setB = new HashSet(); //找到B数组里面那个与A数组相差只有differ的数字
        for(int x: B){
             setB.add(x);
        }
        for(int x: A){
            if (setB.contains(x + differ)){
                res[0] = x;
                res[1] = x+differ;
            }
        }
        return res;
    }
}
