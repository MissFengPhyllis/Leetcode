/*
999. 车的可用捕获量
在一个 8 x 8 的棋盘上，有一个白色车（rook）。也可能有空方块，白色的象（bishop）和黑色的卒（pawn）。它们分别以字符 “R”，“.”，“B” 和 “p” 给出。大写字符表示白棋，小写字符表示黑棋。

车按国际象棋中的规则移动：它选择四个基本方向中的一个（北，东，西和南），然后朝那个方向移动，直到它选择停止、到达棋盘的边缘或移动到同一方格来捕获该方格上颜色相反的卒。另外，车不能与其他友方（白色）象进入同一个方格。

返回车能够在一次移动中捕获到的卒的数量。
输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
输出：3
解释：
在本例中，车能够捕获所有的卒。

[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
输出：0
解释：
象阻止了车捕获任何卒。

输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
输出：3
解释： 
车可以捕获位置 b5，d6 和 f5 的卒。

*/

class Solution {
    public int numRookCaptures(char[][] board) {
        //看第一遍的时候没有看懂这个位置数组的意思，第二遍才知道，为了找到当前这个R的上下左右的位置
        //因为这个是一个二维数组，所以他的上下左右的值不过就是他的X Y值的加一减一
        int[] axisX = {-1,1,0,0};
        int[] axisY = {0,0,-1,1};
        //用户返回最后的捕捉到的卒的个数
        int result  = 0;
        int start = 0;
        int end = 0;
        //两层循环来访问当前的棋盘，也就是这个二维数组
        for(int i = 0 ; i < 8; i++){
            for(int j = 0; j< 8; j++){
                if(board[i][j] == 'R'){
                    start = i;
                    end = j;
                }
                
                //两种方法， 方法一，将获得到的位置坐标直接再加一层循环继续处理
                //如果循环到了这个白车，就来判断这个车的周围环境清理；
                // if(board[i][j] == 'R'){
                //     for(int k = 0; k<4; k++){
                //         int x= i;
                //         int y = j;
                //         while(true){
                //             x = x+axisX[k];
                //             y  = y+axisY[k];
                //             //如果遇到边界情况或者是友方棋子，也就是白色棋子，直接跳出
                //             if(x<0||x>=8 ||y<0 ||y>=8 || board[x][y] == 'B'){
                //                 break;
                //             }
                //             //如果当前这个棋子是黑色的棋子，那就吃子，获得黑子一枚
                //             if(board[x][y] == 'p'){
                //                 result ++;
                //                 break;
                //             }
                //         }
                //     }
                   
                // }

            }
        }
        
        //方法二，将获取到的坐标进行单独处理
//前面的两个for循环就是单纯的找到这个白车的位置，记录下他的坐标
//后面这个就从这个坐标的四个方向进行循环访问，知道遇到不能走下去的条件为止
        for(int k = 0; k< 4; k++){
            //四个方向每次得要遍历完，就必须增大步长，直到这个坐标值到了不能增加的地步
            for(int step = 0;;++step){
                int xx = start +  step *axisX[k];
                int yy = end +  step * axisY[k];
             
                if(xx<0||xx>=8 ||yy<0 ||yy>=8 || board[xx][yy] == 'B'){
                    break;
                }else if(board[xx][yy] == 'p'){
                    result ++;
                    break;
                }
           }
          
        }
        //最后将获得的黑子数返回回去
        return result;

    }
}
