/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    //首先进来判断一下这两个链表是不是为空，如果有其中一个已经为空了，那么接下来就直接返回剩下的链表的值
        if(l1 == null ||l2 == null){
                return l1 == null ? l2 : l1;
            }
            //定义两个链表中的值的求和的值
            int value = l1.val + l2.val;
            //将这个值的个位数添加到最后要返回的那个链表中
            ListNode result = new ListNode(value%10);
            //将这个链表的指针指向下一个，也就是通过调用递归的方式，将l1, l2的当前指针值的下一个值赋值进去
            result.next =addTwoNumbers(l1.next, l2.next);
            //这里再来判断这个和的值是不是大于等于10，因为如果是大于等于的话，也就是需要进位，需要重新赋值的
 
            if(value >= 10){
                result.next =addTwoNumbers(new ListNode(value/10),result.next);
                
            }
            
        return result;
    }
}
