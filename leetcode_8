/*
8. 字符串转换整数 (atoi)
请你来实现一个 atoi 函数，使其能将字符串转换成整数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：

如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。
假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。
该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。
注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0 。

提示：

本题中的空白字符只包括空格字符 ' ' 。
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。
 

示例 1:

输入: "42"
输出: 42
示例 2:

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:

输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:

输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
示例 5:

输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (−231) 。
*/


class Solution {

    public  int myAtoi(String str) {
        //定义一个判断字符串最前面的那个字符是正负号的flag,为负为true， 为正为false
        boolean negFlag = false;
        int res = 0; //这是将来返回回来的数字
        // String notSpaceStr0 = str.replaceAll(" ",""); //这个函数我最开始想复杂了，其实这个就是只需要去掉字符串最前面的空格就行，后面的空格不用管
        String notSpaceStr0 = str.trim();//所以有了这个函数
        String notSpaceStr;//为了将字符串转化为单纯的数字
        if(notSpaceStr0.startsWith("-")){//无论是正号还是负号，反正最后的字符串肯定是从这个符号后一位开始的
            notSpaceStr = notSpaceStr0.substring(1,notSpaceStr0.length());
            negFlag = true;
        }else if(notSpaceStr0.startsWith("+")){
            notSpaceStr = notSpaceStr0.substring(1,notSpaceStr0.length());
            negFlag = false;
        }else{
            notSpaceStr =  notSpaceStr0;//如果都没有，那就保持原样就行
        }
        char[] orginalStr = notSpaceStr.toCharArray();//将字符串转换为字符数组
        StringBuilder sb1 = new StringBuilder();//StringBuilder，先把符合条件的数组存到这个字符数组里面
        for(int i=0; i< orginalStr.length; i++){
            if(orginalStr[i]>=48 && orginalStr[i]<=57){//ascll码的数字0-9，如果是那就循环，sb1就增加一个，否则也就意味着是空格或者字母，反正都不能用
                sb1.append(orginalStr[i]);
               if(negFlag == true) {
                    try{  //这里用try catch 是因为这个转化为数字类型的函数有一定的限度，数字太大或者太小都要报错
                        res = -Integer.parseInt(sb1.toString());
                    }catch (Exception e){
                        //所以如果报错，就直接把这个值变成定义的最小值
                        res = (int)Math.pow(-2,31);
                    }

                }else { //赋值为定义的最大值
                    try{
                        res = Integer.parseInt(sb1.toString());
                    }catch (Exception e){
                        res = (int)Math.pow(2,31);
                    }

                }
            }
           else{ //如果字符串的第一个不是数字，直接返回0，或者当为数字的字符遍历完了，就来判断一下，输出就行
                if(res != 0){
                    juge(res);
                    break; //这里一定要记得break掉，否则他会继续将剩下的字符串遍历，直到所有的数字字符都存下去
                }else {
                    return 0;
                }
            }
        }
        juge(res);
        return res;

    }
    //单纯的判断一下当前这个值是不是超过最大最小值
    public static int juge(Integer res){
        final double MIN_NUM = Math.pow(-2,31);
        final double MAX_NUM = Math.pow(2,31);
        if(res != 0 && res > MIN_NUM && res < MAX_NUM ){
            return res;
        }
        else if(res< MIN_NUM){
            res = (int)MIN_NUM;
        }else if(res>MAX_NUM){
            res = (int)MAX_NUM;
        }
        return res;
    }

}
