/*
94. 二叉树的中序遍历
输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack<>(); //存一个节点类型的栈
        List<Integer> output = new ArrayList<>();//这个用来返回最后的中序的位置
        TreeNode curr = root; //当前节点
        while(curr!=null || !stack.isEmpty()){ //因为中序遍历是左中右，所以我们的让节点遍历到最左边
            while(curr!=null){//等到最左边的节点为空的时候，左边的节点也就存完了
                stack.push(curr);//现将现在这些节点押栈
                curr = curr.left;//按照一直往左边走的顺序押栈
            }
            curr = stack.pop();//现在栈内就是这个二叉树的最左边的值，把它pop，删除这个节点，并且返回这个节点，
            //现在这个就是当前栈内的中序的第一个值
            output.add(curr.val);
            curr = curr.right;//然后再去访问右边的节点
        }
        //最后返回这个序列列表
        return output;
    }
}
