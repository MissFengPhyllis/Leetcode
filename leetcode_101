/*
101. 对称二叉树
给定一个二叉树，检查它是否是镜像对称的。

 

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3
 

进阶：

你可以运用递归和迭代两种方法解决这个问题吗？

解法： 首先一进来就判断当前这两个节点是不是一样的，如果对比的两个节点本身为null的话，肯定就是对称的，当然一开始的时候，穿进去的参数是两个root节点
这个肯定是一样的，但是如果再进入下一步的时候，也就是递归的时候，就能检查出这个节点的左右子节点是不是相同的，检查节点同时需要检查是否有左右节点
并且左右节点的值必须相等，node.val要相等

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return isMirror(root,root);
    }

    public boolean isMirror(TreeNode n, TreeNode m){
        //如果这个节点就是空节点，并且两个节点都是空的话，那肯定是镜像节点
        //如果只有其中一个是空，那么肯定就不是镜像节点了
        if(n==null && m== null) return true;
        if(n==null || m== null) return false;
        //最后判断一下当前节点的左右节点是否是对称的，一个都不能少
        return (n.val == m.val) && isMirror(n.right , m.left) && isMirror(n.left, m.right);
    }
}
